# handlers/register.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from keyboards.register_kb import confirm_kb
from db import add_user_after_register
from datetime import datetime

router = Router()

class RegisterState(StatesGroup):
    full_name = State()
    birthday = State()
    phone = State()
    confirm = State()

@router.message(F.text == "üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
async def start_register(message: Message, state: FSMContext):
    await state.set_state(RegisterState.full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b>:", parse_mode="HTML")  # ‚úÖ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ


@router.message(RegisterState.full_name)
async def get_full_name(message: Message, state: FSMContext):
    text = message.text.strip()
    parts = text.split()

    if len(parts) < 2 or not all(p.isalpha() for p in parts):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ <b>–§–∞–º–∏–ª–∏—é –∏ –ò–º—è</b>, —Ä–∞–∑–¥–µ–ª—è—è –ø—Ä–æ–±–µ–ª–æ–º.")
        return

    formatted_name = ' '.join(part.capitalize() for part in parts)
    await state.update_data(full_name=formatted_name)
    await state.set_state(RegisterState.birthday)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:", parse_mode="HTML")


@router.message(RegisterState.birthday)
async def get_birthday(message: Message, state: FSMContext):
    try:
        b_date = datetime.strptime(message.text.strip(), "%d.%m.%Y")
        today = datetime.today()
        age = today.year - b_date.year - ((today.month, today.day) < (b_date.month, b_date.day))
        await state.update_data(birth_date=b_date.strftime("%Y-%m-%d"), age=age)
        await state.set_state(RegisterState.phone)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>:", parse_mode="HTML")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

import re  # –≤–≤–µ—Ä—Ö—É —Ñ–∞–π–ª–∞

@router.message(RegisterState.phone)
async def get_phone(message: Message, state: FSMContext):
    phone = message.text.strip()

    if not re.fullmatch(r"\+7\d{10}", phone):
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>+7XXXXXXXXXX</b>")
        return

    await state.update_data(phone=phone)
    data = await state.get_data()

    confirm_text = (
        f"<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
        f"üë§ –§–ò–û: {data['full_name']}\n"
        f"üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {data['birth_date']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
    )
    await message.answer(confirm_text, reply_markup=confirm_kb, parse_mode="HTML")
    await state.set_state(RegisterState.confirm)

from keyboards.user_kb import get_user_keyboard  # –ù–µ –∑–∞–±—É–¥—å –∏–º–ø–æ—Ä—Ç

@router.callback_query(F.data == "confirm_register")
async def confirm_register(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    telegram_id = callback.from_user.id

    underage = int(data['age'] < 14)

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    add_user_after_register(
        telegram_id=telegram_id,
        full_name=data['full_name'],
        birth_date=data['birth_date'],
        phone=data['phone'],
        age=data['age'],
        underage=underage
    )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
        reply_markup=get_user_keyboard(registered=True)
    )

    await state.clear()
    await callback.answer()


@router.callback_query(F.data == "cancel_register")
async def cancel_register(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚ùå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
    await callback.answer()


    